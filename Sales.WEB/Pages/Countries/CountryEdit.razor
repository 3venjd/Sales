@page "/countries/edit/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Edit Country</h3>

@if (country is null)
{
    <p>Loading...</p>
}
else
{
    <CountryFrom @ref="countryFrom" Country="country" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Country? country;

    private CountryFrom? countryFrom;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Country>($"/api/countries/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        country = responseHttp.Response;
    }

    private async void EditAsync()
    {
        var responseHttp = await repository.Put("/api/countries/", country);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();

    }

    private void Return()
    {
        countryFrom!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/countries");
    }

}
