@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


@if (country is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@country.Name</h3>
    <div class="mb-2">

        <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items:center;">
            <div>
                <a class="btn btn-primary" href="/states/create/@country.Id">New state/department</a>
            </div>
            <div class="mx-2">
                <input id="titulo" placeholder="Search State" style="width: 400px;" type="text" class="form-control" @bind-value="Filter" />
            </div>
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filter</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Clean</button>
        </div>



        
        <a class="btn btn-success" href="/countries">Back</a>
    </div>

    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPageAsync" />


    <GenericList MyList="states!">

        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th style="width:220px">States / Departments</th>
                        <th style="width:260px">Cities</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in states!)
                    {
                        <tr>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.CitiesNumber
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@state.Id">Details</a>
                                <a class="btn btn-warning" href="/states/edit/@state.Id">Edit</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(state.Id))>Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
    
}

@code {
    private Country? country;
    private List<State>? states;

    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;


    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {

        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/states?id={Id}&page={page}";
            url2 = $"api/states/totalPages?id={Id}";
        }
        else
        {
            url1 = $"api/states?id={Id}&page={page}&filter={Filter}";
            url2 = $"api/states/totalPages?id={Id}&filter={Filter}";
        }

        var responseHttp = await repository.Get<Country>($"api/countries/{Id}");
        var responseHttp2 = await repository.Get<List<State>>(url1);
        var responseHttp3 = await repository.Get<int>(url2);
        country = responseHttp.Response;
        states = responseHttp2.Response;
        totalPages = responseHttp3.Response;

    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "¿Do you want delete the record?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Yes"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/states/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;

        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}
